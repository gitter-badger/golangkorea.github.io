<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Golang Korean Community</title>
    <link>https://golangkorea.github.io/tags/blog/</link>
    <description>Recent content in Blog on Golang Korean Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Aug 2016 23:25:04 -0400</lastBuildDate>
    <atom:link href="https://golangkorea.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>시리즈 #2 - 컨텐츠 제작 기초</title>
      <link>https://golangkorea.github.io/post/hugo-intro/content-basic/</link>
      <pubDate>Tue, 23 Aug 2016 23:25:04 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/hugo-intro/content-basic/</guid>
      <description>

&lt;h1 id=&#34;컨텐츠-제작-기초&#34;&gt;컨텐츠 제작 기초&lt;/h1&gt;

&lt;p&gt;컨텐츠를 제작하면서 꼭 알아야 할 몇가지 개념을 정리하겠습니다.&lt;/p&gt;

&lt;h1 id=&#34;컨텐츠의-조직적인-관리-organization&#34;&gt;컨텐츠의 조직적인 관리 (Organization)&lt;/h1&gt;

&lt;p&gt;사이트가 많은 양의 컨텐츠를 보유하게 되면서 조직적인 관리가 필요할 때 Hugo가 어떻게 도와주는지 알아 봅시다. &lt;a href=&#34;https://golangkorea.github.io/post/hugo-intro/getting-started/&#34;&gt;시리즈 1&lt;/a&gt;에서 보았 듯이 Hugo의 &lt;code&gt;configuration&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt;에 특별한 세팅이 없는 한 모든 컨텐츠는 &lt;code&gt;content&lt;/code&gt; 폴더 안에 위치하게 됩니다. Hugo를 통해 만들어질 사이트의 URL은 &lt;code&gt;content&lt;/code&gt;내의 폴더 구조와 매우 밀접한 관계가 있습니다. 우선 &lt;code&gt;content&lt;/code&gt; 바로 아래 위치하는 폴더는 &lt;code&gt;section&lt;/code&gt;이라고 부르는데 매우 중요한 역활을 합니다. 다음의 예는 &lt;code&gt;section&lt;/code&gt;이 사이트 URL과 어떤 상관이 있는지 암시합니다. 만들어진 사이트의 URL경로는 거울을 보듯이 컨텐츠 소스의 경로을 반영합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ascii&#34;&gt;.
|- content
   |- post
   |  |- firstpost.md   // &amp;lt;- http://1.com/post/firstpost/
   |  |- happy
   |  |  |- ness.md     // &amp;lt;- http://1.com/post/happy/ness/
   |  |- secondpost.md  // &amp;lt;- http://1.com/post/secondpost/
   |- quote
      |- first.md       // &amp;lt;- http://1.com/quote/first/
      |- second.md      // &amp;lt;- http://1.com/quote/second/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그렇다면 컨텐트가 소스의 경로와 다른 URL 경로를 가질 수는 없는 걸까요? 예를 들어,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;파일 이름 보다 좀 더 의미있는 단어가 URL에 나타나게 할 수는 없는가?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;section&lt;/code&gt;을 다른 이름으로 대체할 수는 없는가?&lt;/li&gt;
&lt;li&gt;다른 &lt;code&gt;section&lt;/code&gt;에 속한 컨텐트를 서로 조합해서 일관된 URL로 나타나게 할 수는 없는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 질문들에 대한 답을 얻기 위해서 다음의 개념들을 이해할 필요가 있습니다.&lt;/p&gt;

&lt;h1 id=&#34;컨텐트-경로-destination&#34;&gt;컨텐트 경로 (Destination)&lt;/h1&gt;

&lt;p&gt;이미 살펴본 바와 같이 특별한 변수가 없다면 Hugo를 통해 생성된 컨텐트의 경로는 소스파일의 경로에 의해 결정됩니다. 하지만 컨텐트의 경로는 앞으로 살펴볼 정면 변수들(Front Matter)을 통해 다양한 형태로 조정될 수 있습니다. 그럼 Hugo는 컨텐트의 경로를 어떻게 조립하는 것일까요? 우선 몇가지 경로의 부분을 지칭하는 이름을 소개하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ascii&#34;&gt;            permalink
⊢--------------^-------------⊣
http://spf13.com/projects/hugo

    baseURL       section  slug
⊢-----^--------⊣ ⊢--^---⊣ ⊢-^⊣
http://spf13.com/projects/hugo

    baseURL       section          slug
⊢-----^--------⊣ ⊢--^--⊣        ⊢--^--⊣
http://spf13.com/extras/indexes/example

    baseURL            path       slug
⊢-----^--------⊣ ⊢------^-----⊣ ⊢--^--⊣
http://spf13.com/extras/indexes/example

    baseURL            url
⊢-----^--------⊣ ⊢-----^-----⊣
http://spf13.com/projects/hugo

    baseURL               url
⊢-----^--------⊣ ⊢--------^-----------⊣
http://spf13.com/extras/indexes/example
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;section&lt;/strong&gt; 컨텐트 타입의 기본값을 결정합니다.

&lt;ul&gt;
&lt;li&gt;컨텐트 소스의 위치에 따라 값이 정해집니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; 정면변수의 값은 &lt;code&gt;section&lt;/code&gt; 부분경로를 바꿀 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slug&lt;/strong&gt; 확장자를 제외한 컨텐트 소스의 파일 이름으로 정해집니다.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slug&lt;/code&gt; 정면변수의 값을 통해 바꿀 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt; &lt;code&gt;section&lt;/code&gt;에서 시작하여 &lt;code&gt;slug&lt;/code&gt;직전까지의 경로

&lt;ul&gt;
&lt;li&gt;컨텐트 소스의 경로에 의해 결정됩니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; basicURL 다음부터 &lt;code&gt;slug&lt;/code&gt;까지 포함된 상대적인 URL

&lt;ul&gt;
&lt;li&gt;정면변수에 의해 결정될 수 있으며 컨텐트 경로를 결정하는 다른 정면변수의 영향을 무력화 합니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;slug&lt;/code&gt;나 &lt;code&gt;url&lt;/code&gt; 정면변수들을 통해 컨텐트의 목적지 경로(Destination)를 부분적으로 수정하거나 전면적으로 교체할 수 있다는 걸 알 수 있습니다. 이제 목적지 경로 변경 기능외에 컨텐트 처리와 HTML변환시 정면 변수들이 어떤 역활을 하는지 알아봅시다.&lt;/p&gt;

&lt;h1 id=&#34;정면-변수들-front-matter&#34;&gt;정면 변수들(Front Matter)&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Front Matter&lt;/code&gt;는 컨텐트의 메타 데이터라고 할 수 있습니다. 컨텐트보다 먼저 나타난다는 의미로 &lt;code&gt;front matter&lt;/code&gt;라는 이름을 지었을 것으로 추측해 봅니다. 시작과 끝을 나타내는 문자열에 따라 여러가지 포맷이 지원됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+++&lt;/code&gt;로 시작과 끝이 표시되면 &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt;을 사용해 &lt;code&gt;Front Matter&lt;/code&gt;를 정의할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;---&lt;/code&gt;로 시작과 끝이 표시되면 &lt;a href=&#34;http://yaml.org&#34;&gt;YAML&lt;/a&gt;을 사용해 &lt;code&gt;Front Matter&lt;/code&gt;를 정의할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{&lt;/code&gt;로 시작하고 &lt;code&gt;}&lt;/code&gt;로 끝이 표시되면 &lt;a href=&#34;http://www.json.org&#34;&gt;JSON&lt;/a&gt;을 사용해 &lt;code&gt;Front Matter&lt;/code&gt;를 정의할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 글에서는 TOML의 예만을 살려보도록 하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-08-23T23:25:04-04:00&amp;quot;
draft = true
title = &amp;quot;시리즈 #2 - 컨텐츠 제작 기초&amp;quot;
description = &amp;quot;Hugo 입문 두번째 시리즈로 컨텐츠 제작과 관련해 꼭 알아야 할 개념들을 소개합니다&amp;quot;

tags = [&amp;quot;Blog&amp;quot;, &amp;quot;Hugo&amp;quot;]
categories = [&amp;quot;How-to&amp;quot;]
series = [&amp;quot;Hugo 입문하기&amp;quot;]
authors = [&amp;quot;Jhonghee Park&amp;quot;]

toc = true
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Front Matter&lt;/code&gt;로 정의될 수 있는 변수에 특별한 제약사항은 없습니다. 어떤 변수라도 템플렛안에서 &lt;code&gt;.Params.varname&lt;/code&gt;형식으로 접근할 수 있습니다. 템플릿 안에서 변수이름은 항상 소문자로 표현됩니다. 예를 들어 &lt;code&gt;camelCase = true&lt;/code&gt;라고 정의된 변수는 템플릿안에서는 &lt;code&gt;.Params.camelcase&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;로 값을 출력할 수 있습니다. 다음은 컨텐트 제작에 필수적인 변수들입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; 컨텐트의 제목&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;description&lt;/strong&gt; 컨텐트에 대한 설명&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt; 컨텐츠를 정열할 때 사용할 날짜&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;taxonomies&lt;/strong&gt; 항상 복수형으로 표현되는 분류변수로 위의 예제에 나와있는 &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;categories&lt;/code&gt;, &lt;code&gt;series&lt;/code&gt;, 그리고 &lt;code&gt;authors&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이외에 다음과 같은 선택적으로 사용할 수 있는 변수들도 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;aliases&lt;/strong&gt; 하나 이상의 이름들이 나열된 정렬(예를 들면 이름을 바꾼 컨텐트가 과거에 사용했던 URL)로 현재의 컨텐트 URL로 리디랙트 되는 별명들. 자세한 내용은 다음 링크를 참조, &lt;a href=&#34;https://gohugo.io/extras/aliases/&#34;&gt;Aliases&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;draft&lt;/strong&gt; 만약 값이 true이면, 컨텐트는 HTML로 만들어 지지 않습니다. 하지만 &amp;ndash;buildDrafts 플래크를 써서 강제할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;publishdate&lt;/strong&gt; 만약 날짜가 미래로 잡혀 있으면, 컨텐트는 HTML로 변환되지 않습니다. &amp;ndash;buildFuture 플래그를 써서 강제할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; 컨텐트 타입 (없는 경우는 컨텐트가 속한 디렉토리를 통해 값이 정해집니다. 즉, &lt;code&gt;type&lt;/code&gt;의 기본값은 &lt;code&gt;section&lt;/code&gt;을 통해 정해집니다.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isCJKLanguage&lt;/strong&gt; 값이 true인 경우, 컨텐트를 한중일 언어로 작성된 것으로 간주하고, &lt;code&gt;.Summary&lt;/code&gt;와 &lt;code&gt;WordCount&lt;/code&gt;와 같은 값들이 한중일 언어에 맞게 생성됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;weight&lt;/strong&gt; 컨텐트의 차례를 정렬하는데 사용됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;markup&lt;/strong&gt; (실험적변수) &lt;code&gt;rst&lt;/code&gt;는 reStructuredText (rst2html 툴을 사용합니다) or &lt;code&gt;md&lt;/code&gt; (기본값) 은 Markdown&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slug&lt;/strong&gt; URL의 말단에 위치하는 토큰(token)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; 웹 루트에서 컨텐트까지의 전체 경로.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사이트 개발자의 입장에서 사이트의 기능을 확장하고 컨텐트 제작자에게 그 기능을 조종할 수 있는 인터페이스를 제공하려고 할 때 정면 변수를 유용하게 사용할 수 있습니다. 위에 정면변수 예를 보면, 렌더링된 컨텐트의 상단에 목차를 구현하고 그 기능을 컨텐트 제작시 &lt;code&gt;toc = true&lt;/code&gt;를 이용해 나타나게 하는 예가 있습니다. 또 다른 예는 &lt;code&gt;authors&lt;/code&gt;를 분류변수(taxonomies)로 등록하고 테마를 통해 구현한 뒤 정면변수의 하나로 컨텐트 제작자에게 자신의 이름을 입력할 수 있게 합니다. 컨텐츠 제작자는 항상 동일한 이름을 사용함으로서 사이트가 제공하는 컨텐츠 목록의 자동 발생을 사용할 수 있습니다.&lt;/p&gt;

&lt;h1 id=&#34;지원되는-컨텐트의-포맷&#34;&gt;지원되는 컨텐트의 포맷&lt;/h1&gt;

&lt;p&gt;컨텐트 상단에 정면변수들의 정의되고 그 뒤로 컨텐트의 내용이 따라옵니다. Hugo의 컨텐트는 다양한 포맷으로 제작될 수 있습니다. &lt;a href=&#34;http://www.methods.co.nz/asciidoc/&#34;&gt;asciidoc&lt;/a&gt;, &lt;a href=&#34;http://docutils.sourceforge.net/rst.html&#34;&gt;reStructuredText&lt;/a&gt;는 외부 프로그램의 도움을 얻어 지원되는 포맷들입니다. 외부 툴에 의존하지 않고 Hugo 자체적으로 컨텐트를 제작할 수 있는 포맷은 &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;Markdown&lt;/a&gt;입니다. Markdown을 이용해 새로운 컨텐트를 제작하고 싶으면 &lt;code&gt;hugo new&lt;/code&gt;명령에 &lt;code&gt;md&lt;/code&gt;확장자를 가지는 파일이름을 사용해 시작할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/my-first-blog.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 명령이 실행되면 Markdown 파일이 만들어 지고 기본적인 정면변수들의 셑업이 이루어 집니다. 이 Scaffolding 과정에서 Hugo는 post라는 archetype을 찾기 위해 테마의 archetypes 폴더나 프로젝트 내 archetypes 폴더안을 검색하고 정면변수들의 기본 셑업을 진행합니다. 만약에 post archetype이 정의되어 있지 않을 때는 Hugo의 기본 값들을 사용합니다.&lt;/p&gt;

&lt;h1 id=&#34;컨텐트-타입과-전형-content-types-and-archetypes&#34;&gt;컨텐트 타입과 전형 (Content Types and archetypes)&lt;/h1&gt;

&lt;p&gt;컨텐트 타입은 기본적으로 소스의 위치가 어디에 있느냐에 따라 결정 됩니다. &lt;code&gt;post/my-first-blog.md&lt;/code&gt;에 작성된 컨텐트는 정면변수 &lt;code&gt;type&lt;/code&gt;이 존재하지 않는 한 post 컨텐트 타입으로 간주되어 타입에 맞는 렌더링이 이루어 집니다. 만약에 전혀 새로운 컨텐트 타입을 도입하고자 하면 어떻게 해야 할까요? 예를 들어 musician이라는 컨텐트 타입을 통해 유명한 음악가들의 소개를 하고자 하는 가정을 합시다. &lt;code&gt;hugo new musician/bach.md&lt;/code&gt;로 컨텐트를 초기화 했을때 Hugo의 입장에서는 musician이라는 컨텐트 타입으로 bach.md의 HTML을 렌더링하려고 할 것입니다. musician 컨텐트에 특화된 렌더링을 제공하려면 다음과 같이 새로운 탬플릿을 layouts에 추가해야 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;우선 컨텐트 자체의 렌더링을 위해 &lt;code&gt;layouts/musician/single.html&lt;/code&gt;을 추가합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;section&lt;/code&gt; 리스트 페이지의 렌더링을 지원하기 위해서는 &lt;code&gt;layouts/section/musician.html&lt;/code&gt;을 추가합니다.&lt;/li&gt;
&lt;li&gt;음악가의 시대에 따라 조금씩 다른 페이지 뷰(View)를 제공하려면 &lt;code&gt;layouts/musician&lt;/code&gt;안에 변형된 템플릿을 추가하고 컨텐트의 정면변수로 &lt;code&gt;layout&lt;/code&gt;을 사용해 지정해 줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;템플릿을 준비하면서 musician 컨텐트 타입에 필요한 새로운 정면변수들이 생길 수 있습니다. 저자의 입장에서는 새로운 musician 컨텐트를 &lt;code&gt;hugo new&lt;/code&gt;명령으로 발생 시킨 후 첨가된 정면변수들을 일일이 &lt;strong&gt;기억&lt;/strong&gt;해서 입력해야 하는 불편함이 생깁니다. 이런 불편함을 해소하기 위해 musician 컨텐트 타입의 전형(archetype)을 정의해 줄 필요가 있습니다. musician archetype은 &lt;code&gt;archetypes/musician.md&lt;/code&gt;를 사용해 정의되고 이 archetype 문서에 필요한 기본값들을 지정해 줄 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;archetypes/musician.md&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
name = &amp;quot;&amp;quot;
bio = &amp;quot;&amp;quot;
genre = &amp;quot;&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 archetype을 사용해 새 musician 컨텐트를 만들어 봅시다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new musician/mozart.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo는 musician 타입을 인지하고 준비된 archetype을 이용하여 정면변수들을 자동으로 입력해 줍니다.
&lt;strong&gt;content/musician/mozart.md&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;mozart&amp;quot;
date = &amp;quot;2015-08-24T13:04:37+02:00&amp;quot;
name = &amp;quot;&amp;quot;
bio = &amp;quot;&amp;quot;
genre = &amp;quot;&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;컨텐츠 저자의 관점에서 보면 이제 어느 정도 Hugo를 이용해 정적사이트를 건설할 준비가 끝난 셈입니다. 이어지는 시리즈에서는 사이트 개발자의 관점에서 어떻게 새로운 테마를 만들 수 있는지, 정면변수들과 사이트 구성변수(configuration)들이 템플릿안에서 어떻게 접근할 수 있는지를 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;br/&gt;
  &lt;ol&gt;
    &lt;li&gt;Hugo의 configuration은 특별한 조치가 없는 경우 프로젝트 폴더내 config.toml에 정의됩니다. TOML외 YAML과 JSON 포맷이 지원됩니다.&lt;/li&gt;
    &lt;li&gt;Hugo는 여러 템플릿 엔진을 지원합니다. 이 글에서는 Go언어의 자체적 &lt;code&gt;text/template&lt;/code&gt;을 사용하는 것을 전제합니다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>시리즈 #1 - Hugo 시작하기</title>
      <link>https://golangkorea.github.io/post/hugo-intro/getting-started/</link>
      <pubDate>Tue, 23 Aug 2016 23:24:55 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/hugo-intro/getting-started/</guid>
      <description>

&lt;h1 id=&#34;hugo-시작하기&#34;&gt;Hugo 시작하기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;는 Go로 제작되고 하나의 실행파일로 배포됩니다. 다양한 설치 방법이 있지만 우선 Package Manager를 쓰시는 분들을 중심으로 살펴보겠습니다.&lt;/p&gt;

&lt;h2 id=&#34;package-manager로-설치하기&#34;&gt;Package Manager로 설치하기&lt;/h2&gt;

&lt;p&gt;MacOS를 쓰시는 분들은 Homebrew를 이용해 쉽게 설치하실 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows에서 Chocolatey를 쓰시는 분들도 비슷한 방법으로 설치가 가능합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\&amp;gt; choco install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Linux에서는 조금 복잡해 집니다. 우분트를 쓰시는 분들은 우선 &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo 릴리즈 페이지&lt;/a&gt;로 가서 최신 deb 버전을 다운로드한 후에 다음 명령을 실행 시키면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dpkg -i hugo*.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;소스로-직접-빌드해-쓰는-방법&#34;&gt;소스로 직접 빌드해 쓰는 방법&lt;/h2&gt;

&lt;p&gt;이미 Go로 개발 환경을 갖추고 계신 분들은 직접 소스를 빌드해 쓰시는 방법이 가장 편합니다. 간단히 &lt;code&gt;go get&lt;/code&gt;툴을 이용해 설치하실 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo가 설치되었는지를 &lt;code&gt;version&lt;/code&gt; 보조 명령어를 사용해 확인하십시요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo version
Hugo Static Site Generator v0.17-DEV BuildDate: 2016-08-21T19:44:40-04:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;프로젝트-폴더-만들기&#34;&gt;프로젝트 폴더 만들기&lt;/h1&gt;

&lt;p&gt;정적 사이트 제너레이터를 처음 접하시는 분들을 위해 Hugo를 간단하게 설명하자면, Hugo는 소스 폴더 아래 존재하는 파일과 컨텐츠 템플릿을 입력으로 사용해서 웹사이트 전체를 출력하는 시스템입니다. 보통 소스는 &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;Markdown&lt;/a&gt;을 이용한 컨텐츠이거나 템플릿 언어로 작성된 HTML에 자바스크립과 CSS스타일로 구성되어 웹 개발자에게 매우 친숙한 환경이라 할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ascii&#34;&gt;  +------------------+
  |    Content       +--------+
  |    (Markdown)    |        |
  +------------------+        |           +------------+
  +------------------+     +--v---+       |Full Website|
  |Template          |     |      |       +-------+----+
  |(text/template)   |     | Hugo |       |       |    |
  |(Ace)             +-----&amp;gt;      +-------&amp;gt;       |    |
  |(Amber)           |     |      |       |       |    |
  +------------------+     +--^--^+       |       |    |
  +------------------+        |  |        |       |    |
  |Configuraton      |        |  |        +-------+----+
  |(toml, yaml, json)+--------+  |
  +------------------+           |
  +------------------+           |
  | Static           |           |
  | (image)          |           |
  | (javascript)     +-----------+
  | (css)            |
  +------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo는 커맨드라인 명령어 체계는 각종 보조 명령어와 POSIX를 준수하는 플래그로 구성되어 빌드와 유틸리티 기능을 제공합니다. 우선 Hugo가 제공하는 Scaffolding 명령어를 가지고 프로젝트 폴더를 만들어 보도록 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site golangkorea-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo의 모든 명령은 &lt;code&gt;hugo&lt;/code&gt;로 시작하고 보조 명령어가 뒤를 따릅니다. 여기서 &lt;code&gt;new&lt;/code&gt;는 보조 명령어로서 &lt;code&gt;site&lt;/code&gt; 보조 명령어와 함께 프로젝트를 초기화합니다. 초기화된 프로젝트의 폴더 구조는 다음과 같습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd golangkorea-hugo
$ tree -a
.
├── archetypes
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes

6 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;초기화된 프로젝트에는 텅빈 폴더 6개와 &lt;code&gt;config.toml&lt;/code&gt; 파일 하나가 만들어 집니다. 각 폴더의 용도를 간단히 나열하면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes: &lt;code&gt;hugo new&lt;/code&gt;명령으로 컨텐트 생성시 &lt;a href=&#34;https://gohugo.io/content/front-matter/&#34;&gt;Front Matter&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; 에 컨텐트 타입에 따른 기본 값들을 어떻게 정해줄 것인가를 결정하는 파일들을 저장합니다.&lt;/li&gt;
&lt;li&gt;content: 컨텐츠가 저장됩니다.&lt;/li&gt;
&lt;li&gt;data: 템플랫으로 불러쓸 수 있는 데이터 파일을 저장하는 공간입니다. 데이터의 타입은 toml, yaml, 과 json이 지원됩니다.&lt;/li&gt;
&lt;li&gt;layouts: 테마를 커스터마이징할 때 기존의 테마내 탬플릿의 내용을 수정하거나 덧씌우기를 하는 템플릿을 저장하는 공간입니다.&lt;/li&gt;
&lt;li&gt;static: 이미지, 자바스크립, CSS등을 저장하는 공간&lt;/li&gt;
&lt;li&gt;themes: 사이트의 테마를 저장하는 공간.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;config.toml의 내용을 보면 다음과 같습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;baseurl&lt;/code&gt;은 말 그대로 사이트내 모든 리소스의 URL의 베이스를 형성합니다. 예를 들어 &lt;code&gt;content/post/my-first-blog.md&lt;/code&gt;라는 컨텐트가 있으면 Full URL은 &lt;code&gt;http://replace-this-with-your-hugo-site.com/post/my-first-blog&lt;/code&gt;이 됩니다.&lt;/p&gt;

&lt;h1 id=&#34;첫번째-컨텐트-만들기&#34;&gt;첫번째 컨텐트 만들기&lt;/h1&gt;

&lt;p&gt;그럼, 다음 Scaffolding 명령을 써서 첫번째 블로그 포스트를 만들어 보도록 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/my-first-blog.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;content/post/my-first-blog.md&lt;/code&gt;가 만들어 지면 아래와 같이 편집을 하고 저장하십시요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-08-24T21:51:10-04:00&amp;quot;
draft = true
title = &amp;quot;my first blog&amp;quot;

+++

# Hello, Hugo! &amp;lt;- 편집 부분
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;명령을 써서 Hugo가 제공하는 웹서버를 구동한 다음 &lt;code&gt;http://localhost:1313&lt;/code&gt;을 브라우저로 열어 보십시요. 텅빈 페이지로 나타날 겁니다. 왜 그럴까요? 답 부터 말씀드리면 Hugo의 입장에서는 무엇으로 페이지를 렌더링할 지 아무런 정보가 없는 경우인 것입니다. &lt;code&gt;layouts&lt;/code&gt; 폴더안에 &lt;code&gt;index.html&lt;/code&gt;이라는 파일을 만들고 다음과 같이 편집해 저장하신 다음 다시 &lt;code&gt;http://localhost:1313&lt;/code&gt;을 열어 보십시요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Hello, Hugo!&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hello, Hugo!&lt;/strong&gt;라고 크게 나타나는 것을 보게 될 것입니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;http://localhost:1313/post/my-first-blog&lt;/code&gt;를 열어 보십시요. 심지어 &lt;code&gt;404 page not found&lt;/code&gt;라고 나옵니다. 텅빈 페이지가 아니고 왜 404일까요? 이유는 포스트의 Front Matter에 &lt;code&gt;draft = true&lt;/code&gt;라고 명시되어 있어서 Hugo의 입장에서는 렌더링을 할 이유가 없는 것이죠. &lt;code&gt;Ctrl-C&lt;/code&gt;로 Hugo 웹서버를 중단시킨 다음 &lt;code&gt;hugo server -D=true&lt;/code&gt;명령을 써서 다시 웹서버를 가동시키시고 &lt;code&gt;http://localhost:1313/post/my-first-blog&lt;/code&gt;를 열어 보십시요. 이번에는 404가 아니고 텅빈 페이지가 보일 겁니다. Hugo를 의인화해서 다시 설명을 드리면, &lt;code&gt;-D=true&lt;/code&gt; 플래그를 보고 드래프트 포스트도 렌더링을 해야 하는데 어떻게 해야 할 지 몰라 백지를 낸 상황인 겁니다. 이건 어떻게 고쳐야 할까요?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;layouts/post/single.html&lt;/code&gt;라는 파일을 만드시고 다음의 내용을 저장하신 다음, &lt;code&gt;http://localhost:1313/post/my-first-blog&lt;/code&gt;을 열어 보세요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Before content&amp;lt;/p&amp;gt;
{{ .Content }}
&amp;lt;p&amp;gt;After content&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;첫번째 포스트가 이제 보이십니까?&lt;/p&gt;

&lt;h1 id=&#34;이렇게-힘들게-만들어야-하나&#34;&gt;이렇게 힘들게 만들어야 하나?&lt;/h1&gt;

&lt;p&gt;이런 질문이 당연히 생기실 겁니다. 사이트의 구조와 컨텐츠의 템플릿을 하나씩 만들어 나가야 한다면 사이트 발생기라고 부를 이유가 없겠죠. 누군가 그런 힘든 노동을 통해 &lt;code&gt;layouts&lt;/code&gt;의 구조와 템플랫을 모두 작성했다면 공유할 수 있는 메카니즘이 필요합니다. 그런 공유의 매카니즘을 &lt;code&gt;테마(theme)&lt;/code&gt;이라고 부릅니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;layouts/index.html&lt;/code&gt;과 &lt;code&gt;layouts/post/single.html&lt;/code&gt;을 제거하시고 테마를 사용하는 방법을 배워 봅시다. 다음과 같이 &lt;code&gt;hugo-octopress&lt;/code&gt; 테마를 설치하십시요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm layouts/index.html
$ rm layouts/post/single.html
$ cd themes
$ git clone https://github.com/parsiya/Hugo-Octopress.git
$ cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테마가 설치된 후에는 Hugo의 웹서버를 다음과 같이 시작해 보십시요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -D=true -t=hugo-octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo로 만든 당신의 첫번째 포스트가 보일 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/211484/17955233/9990f3c8-6a4e-11e6-8d3e-0c824453ba1f.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;1. 컨텐트 인스턴스의 메타데이터로 템플릿에서 호출해 쓸 수 있습니다.&lt;/code&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 입문 - 개요</title>
      <link>https://golangkorea.github.io/post/hugo-intro/overview/</link>
      <pubDate>Tue, 23 Aug 2016 22:35:57 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/hugo-intro/overview/</guid>
      <description>&lt;p&gt;Hugo는 현존하는 가장 빠른 정적 사이트 제너레이터(Static Site Generator)로 알려져 있습니다. 기능적인 측면에서도 여타 동적 사이트 제너레이터(Static Site Generator)에 비해 손색이 없을 뿐더러 설치가 간편하고 Go언어에 친숙한 개발자들에게는 최고의 컨텐츠 제작 환경을 제공한다고 생각합니다. &lt;a href=&#34;https://golangkorea.github.io&#34;&gt;Golang Korean Community&lt;/a&gt; 사이트도 Hugo로 제작되고 있습니다. &lt;strong&gt;Hugo 입문&lt;/strong&gt; 시리즈를 통해 이 사이트에 기여하시고자 하는 분들에게 가이드라인을 제공할 뿐만 아니라 자신만의 블로그 사이트를 쉽게 제작하고자 하는 분들에게도 도움이 되길 바라는 마음으로 시리즈를 준비했습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golangkorea.github.io/post/hugo-intro/getting-started/&#34;&gt;Hugo 시작하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golangkorea.github.io/post/hugo-intro/content-basic/&#34;&gt;컨텐츠 제작 기초&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golangkorea.github.io/post/hugo-intro/theme-customizing/&#34;&gt;사이트 테마 커스터마이징 하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golangkorea.github.io/post/hugo-intro/taxonomy-basic/&#34;&gt;분류(Taxonomy)기능 사용하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golangkorea.github.io/post/hugo-intro/how-to-contribute-content/&#34;&gt;사이트에 블로그 올리는 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ReadMe First</title>
      <link>https://golangkorea.github.io/post/readme-first/</link>
      <pubDate>Fri, 19 Aug 2016 23:35:49 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/readme-first/</guid>
      <description>

&lt;h1 id=&#34;the-slow-hunch&#34;&gt;The Slow Hunch&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Where-Good-Ideas-Come-Innovation/dp/1594487715&#34;&gt;Where Good Ideas Come From: The Natural History of Innovation&lt;/a&gt;의 저자 Steven B. Johnson에 따르면 인류의 역사를 바꾼 혁신들은 번뜩이는 아이디어에서 시작된 경우가 매우 드물다고 합니다. 대개는 개개인의 작은 아이디어들이 오랜 시간에 걸쳐 다른 사람이 갖고 있는 비슷하거나 전혀 다른 아이디어들과 충돌하고 결합하면서 커뮤니티의 지능으로 진화하고 어느 순간 돌이킬 수 없는 변화의 모멘텀을 형성하며 세상을 바꿉니다. 커뮤니티내에 공유되고 있는 지능이 다시 역으로 개개인에게 영감과 비젼을 제시하는 상호작용을 일으키게 되는데 그런 과정은 통해 아이디어의 생산을 가능케하는 현상을 slow hunch라고 부릅니다.&lt;/p&gt;

&lt;p&gt;새로 시작하는 Golang Korean 커뮤니티 웹사이트(가칭)은 프로그래밍 언어인 Go와 퉅들, 글로벌 개발자 커뮤니티내의 트랜드와 최선의 개발방식에 대한 소개를 블로그와 뉴스레터의 형식을 통해 공유하고자 첫발을 내딛었습니다. 지속적인 지식의 축적과 폭 넗은 공유가 이루어지는 웹사이트로 성장하여 미래의 킬러앱과 킬러 아이디어를 만들어내는 slow hunch에 기여할 수 있기를 기대해 봅니다. 많은 성원 부탁드립니다.&lt;/p&gt;

&lt;h1 id=&#34;콘텐트-제작-및-웹사이트-개발-참여-신청&#34;&gt;콘텐트 제작 및 웹사이트 개발 참여 신청&lt;/h1&gt;

&lt;p&gt;Golang Korean 커뮤니티 웹사이트(이하 GoCoWeb)은 &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Page&lt;/a&gt;로 제작되고 모든 소스와 제작과정이 공개로 이루어 집니다: &lt;a href=&#34;https://github.com/golangkorea&#34;&gt;https://github.com/golangkorea&lt;/a&gt;. Go언어로 개발 경험이나 best practice를 공유하고 싶으신 분이면 누구나 환영합니다. 멤버 신청은 &lt;a href=&#34;mailto:golanginkorea@gmail.com&#34;&gt;golanginkorea@gmail.com&lt;/a&gt; 이나 &lt;a href=&#34;https://gitter.im/golang-korean-community/Lobby?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&#34;&gt;Golang Korean Community / Lobby&lt;/a&gt;로 해 주시면 됩니다. 일단 멤버로 등록되면 &lt;a href=&#34;https://github.com/orgs/golangkorea/teams/golangkorea-website&#34;&gt;golangkorea-website team&lt;/a&gt;을 통해 콘텐츠를 공유하실 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golangkorea.github.io&#34;&gt;golangkorea.github.io&lt;/a&gt; 개발, 유지 보수 및 지원에 대한 토론은 &lt;a href=&#34;https://gitter.im/golang-korean-community/golangkorea.github.io?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&#34;&gt;Gitter Room&lt;/a&gt;을 통해 하고 있으니 많은 동참 바라겠습니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>